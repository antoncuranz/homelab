######################
# Jellyfin           #
######################

jellyfin:
  global:
    nameOverride: jellyfin

  controllers:
    main:
      strategy: Recreate

      pod:
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch
          supplementalGroups:
            - 44  # video
            - 109  # render

      containers:
        main:
          image:
            repository: jellyfin/jellyfin
            tag: 10.9.11
          env:
            TZ: Europe/Berlin
          resources:
            requests:
              gpu.intel.com/i915: "1"
            limits:
              gpu.intel.com/i915: "1"
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /health
                  port: 8096
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 50Gi
    cache:
      enabled: true
      type: emptyDir
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: /filme
              subPath: filme
            - path: /serien
              subPath: serien

  service:
    main:
      ports:
        http:
          port: 8096


  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyfin.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: jellyfin-tls-certificate
          hosts:
            - *host


######################
# Jellyseerr         #
######################

jellyseerr:
  global:
    nameOverride: jellyseerr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch

      containers:
        main:
          image:
            repository: fallenbagel/jellyseerr
            tag: 1.9.2
          env:
            TZ: Europe/Berlin
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 5055
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      globalMounts:
        - path: /app/config
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: jellyseerr-dst

  service:
    main:
      ports:
        http:
          port: 5055

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: &host "jellyseerr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: jellyseerr-tls-certificate
          hosts:
            - *host


######################
# Prowlarr           #
######################

prowlarr:
  global:
    nameOverride: prowlarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch
        annotations:
          setGateway: "true"

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/prowlarr
            tag: 1.23.1.4708
          env:
            TZ: Europe/Berlin
            PROWLARR__SERVER__PORT: &port 9696
            PROWLARR__LOG__DBENABLED: False
            PROWLARR__AUTH__METHOD: External
            PROWLARR__AUTH__REQUIRED: DisabledForLocalAddresses
            PROWLARR__POSTGRES__HOST:
              valueFrom:
                secretKeyRef:
                  name: database-prowlarr-user
                  key: HOST
            PROWLARR__POSTGRES__USER:
              valueFrom:
                secretKeyRef:
                  name: database-prowlarr-user
                  key: LOGIN
            PROWLARR__POSTGRES__PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: database-prowlarr-user
                  key: PASSWORD
            PROWLARR__POSTGRES__MAINDB:
              valueFrom:
                secretKeyRef:
                  name: database-prowlarr-user
                  key: DATABASE_NAME
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: prowlarr-dst

  service:
    main:
      ports:
        http:
          port: *port

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "prowlarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: prowlarr-tls-certificate
          hosts:
            - *host


######################
# Radarr             #
######################

radarr:
  global:
    nameOverride: radarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch
        annotations:
          setGateway: "true"

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/radarr
            tag: 5.10.4.9218
          env:
            TZ: Europe/Berlin
            RADARR__SERVER__PORT: &port 7878
            RADARR__LOG__DBENABLED: False
            RADARR__AUTH__METHOD: External
            RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
            RADARR__POSTGRES__HOST:
              valueFrom:
                secretKeyRef:
                  name: database-radarr-user
                  key: HOST
            RADARR__POSTGRES__USER:
              valueFrom:
                secretKeyRef:
                  name: database-radarr-user
                  key: LOGIN
            RADARR__POSTGRES__PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: database-radarr-user
                  key: PASSWORD
            RADARR__POSTGRES__MAINDB:
              valueFrom:
                secretKeyRef:
                  name: database-radarr-user
                  key: DATABASE_NAME
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: radarr-dst
    mediarr:
      enabled: true
      existingClaim: mediarr

  service:
    main:
      ports:
        http:
          port: *port

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "radarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *host


######################
# Sonarr             #
######################

sonarr:
  global:
    nameOverride: sonarr

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch
        annotations:
          setGateway: "true"

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/sonarr-develop
            tag: 4.0.9.2386
          env:
            SONARR__SERVER__PORT: &port 8989
            SONARR__LOG__DBENABLED: False
            SONARR__AUTH__METHOD: External
            SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
            SONARR__POSTGRES__HOST:
              valueFrom:
                secretKeyRef:
                  name: database-sonarr-user
                  key: HOST
            SONARR__POSTGRES__USER:
              valueFrom:
                secretKeyRef:
                  name: database-sonarr-user
                  key: LOGIN
            SONARR__POSTGRES__PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: database-sonarr-user
                  key: PASSWORD
            SONARR__POSTGRES__MAINDB:
              valueFrom:
                secretKeyRef:
                  name: database-sonarr-user
                  key: DATABASE_NAME
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 2
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: sonarr-dst
    mediarr:
      enabled: true
      existingClaim: mediarr

  service:
    main:
      ports:
        http:
          port: *port

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "sonarr.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *host


######################
# Transmission       #
######################

transmission:
  global:
    nameOverride: transmission

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        hostname: transmission
        annotations:
          setGateway: "true"
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch

      initContainers:
        01-init-themes:
          name: theme-provider
          image:
            repository: registry.gitlab.com/antoncuranz/transmission-themes
            tag: latest
          command:
            - sh
          args:
            - -c
            - |
              echo "Copying themes..."
              cp -R /opt/transmission-ui/* /themes

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/transmission
            tag: 4.0.5
          env:
            TZ: Europe/Berlin
            TRANSMISSION__BLOCKLIST_URL: "https://github.com/Naunter/BT_BlockLists/raw/master/bt_blocklists.gz"
            TRANSMISSION__DOWNLOAD_DIR: "/downloads/mediarr"
            TRANSMISSION__INCOMPLETE_DIR_ENABLED: false
            TRANSMISSION__RPC_PORT: &port 9091
            TRANSMISSION__PEER_PORT: 9453
            TRANSMISSION__MESSAGE_LEVEL: 3
            TRANSMISSION__SPEED_LIMIT_DOWN_ENABLED: true
            TRANSMISSION__SPEED_LIMIT_DOWN: 20000
            TRANSMISSION_WEB_HOME: "/opt/transmission-ui/transmissionic"

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: transmission-dst
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: /downloads/mediarr
              subPath: transmission
    themes:
      enabled: true
      type: emptyDir
      advancedMounts:
        main:
          01-init-themes:
            - path: /themes
          main:
            - path: /opt/transmission-ui

  service:
    main:
      ports:
        http:
          port: *port

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "transmission.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: transmission-tls-certificate
          hosts:
            - *host


######################
# sabnzbd            #
######################

sabnzbd:
  global:
    nameOverride: sabnzbd

  controllers:
    main:
      strategy: RollingUpdate

      pod:
        annotations:
          setGateway: "true"
        securityContext:
          runAsUser: 568
          runAsGroup: 568
          fsGroup: 568
          fsGroupChangePolicy: OnRootMismatch

      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/sabnzbd
            tag: 4.3.3
          env:
            TZ: Europe/Berlin
            SABNZBD__PORT: 80
            SABNZBD__HOST_WHITELIST_ENTRIES: >-
              sabnzbd,
              sabnzbd.default,
              sabnzbd.default.svc,
              sabnzbd.default.svc.cluster,
              sabnzbd.default.svc.cluster.local,
              sabnzbd.serverton.de
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api?mode=version
                  port: 80
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 250Mi
      dataSourceRef:
        kind: ReplicationDestination
        apiGroup: volsync.backube
        name: sabnzbd-dst
    tmp:
      type: emptyDir
    mediarr:
      enabled: true
      existingClaim: mediarr
      advancedMounts:
        main:
          main:
            - path: /mediarr
              subPath: sabnzbd

  service:
    main:
      ports:
        http:
          port: 80

  ingress:
    main:
      enabled: true
      className: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "ipv4.serverton.de"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: https://oauth2.serverton.de/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://oauth2.serverton.de/oauth2/auth
      hosts:
        - host: &host "sabnzbd.serverton.de"
          paths:
            - path: /
              service:
                name: main
                port: http
      tls:
        - secretName: sabnzbd-tls-certificate
          hosts:
            - *host
